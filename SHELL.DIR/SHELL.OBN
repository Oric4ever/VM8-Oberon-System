MODULE SHELL;
IMPORT SYSTEM, Terminal, Dir32, Files, ComLine;

(* $X+ *)

CONST NUL = 0X; CTRLC = 03X; BackSpace = 08X; TAB = 09X; LF = 0AX; CR = 0DX;
      XOFF = 13X; CTRLX = 18X; EOT = 1AX; ESC = 1BX; SPACE = 20X; DEL = 7FX;
      PROMPT = "#";

VAR

buffer     : ARRAY 80 OF CHAR;
exit       : BOOLEAN;
index      : INTEGER;
command    : INTEGER;
history    : Files.File;
rider      : Files.Rider;
historyBuf : ARRAY 4096 OF BYTE;
historySize: INTEGER;
historyPos : INTEGER;
newHistory : BOOLEAN;

PROCEDURE OpenHistory;
VAR i: INTEGER;
    fileSize: LONGINT;
BEGIN
  Dir32.SaveCurrentDir;
  Dir32.EnterRootDir;
  IF Dir32.EnterDir("SHELL") THEN
    history    := Files.Old("HISTORY.TXT");
    newHistory := history = NIL;
    IF newHistory THEN history := Files.New("HISTORY.TXT") END;
    fileSize   := Files.Length(history);
    IF fileSize < LONG(LEN(historyBuf)) 
    THEN historySize := INT(fileSize)
    ELSE historySize := LEN(historyBuf)
    END;
    Files.Set      (rider, history,    fileSize - LONG(historySize));
    Files.ReadBytes(rider, historyBuf, historySize);
    historyPos  := historySize
  END;
  Dir32.BackToSavedDir
END OpenHistory;

PROCEDURE StoreCommandInHistory(cmdline: ARRAY OF CHAR);
VAR fileSize: LONGINT;
    i: INTEGER;
BEGIN
  i := 0; WHILE cmdline[i] # NUL DO Files.Write(rider, ORD(cmdline[i])); INC(i) END;
  Files.Write(rider, ORD(LF));
END StoreCommandInHistory;

PROCEDURE HistoryBack(VAR buffer: ARRAY OF CHAR; VAR index: INTEGER);
VAR pos : INTEGER;
    char: CHAR;
BEGIN
  IF historyPos >= 2 THEN
    REPEAT DEC(historyPos) UNTIL (historyPos = 0) OR (historyBuf[historyPos-1] = ORD(LF));
    pos   := historyPos;
    index := 0;
    REPEAT
      char := CHR(historyBuf[pos]); INC(pos);
      IF index < LEN(buffer) THEN buffer[index] := char; INC(index) END;
    UNTIL char = LF;
    DEC(index);
    buffer[index] := NUL
  END
END HistoryBack;

PROCEDURE HistoryNext(VAR buffer: ARRAY OF CHAR; VAR index: INTEGER);
VAR pos : INTEGER;
    char: CHAR;
BEGIN
  IF historyPos < historySize THEN
    WHILE (historyPos < historySize) AND (historyBuf[historyPos] # ORD(LF)) DO INC(historyPos) END;
    INC(historyPos);
    pos   := historyPos;
    index := 0;
    WHILE (pos < historySize) AND (historyBuf[pos] # ORD(LF)) DO
      IF index < LEN(buffer)-1 THEN buffer[index] := CHR(historyBuf[pos]); INC(index) END;
      INC(pos)
    END;
    buffer[index] := NUL
  END
END HistoryNext;

PROCEDURE RefreshLine(buffer: ARRAY OF CHAR);
BEGIN
  Terminal.Char  (CR);
  Terminal.Char  (PROMPT);
  Terminal.Char  (SPACE);
  Terminal.String(buffer);
  Terminal.ClearToEOL
END RefreshLine;

PROCEDURE DeleteLastChar(VAR buffer: ARRAY OF CHAR; index: INTEGER);
BEGIN
  buffer[index] := NUL;
  Terminal.Char(BackSpace);
  Terminal.Char(' ');
  Terminal.Char(BackSpace);
END DeleteLastChar;

PROCEDURE ReadCmdLine(VAR buffer: ARRAY OF CHAR);
VAR i : INTEGER;
    char: CHAR;
BEGIN
  i := 0;
  REPEAT
    char := Terminal.Get();
    IF char = TAB THEN char := SPACE END;
    IF (char >= SPACE) AND (char < DEL) THEN
      IF i < LEN(buffer)-1 THEN
        Terminal.Char(char);
        buffer[i] := CAP(char);
        INC(i);
      END;
    ELSIF (char = BackSpace) OR (char = DEL) THEN
      IF i # 0 THEN DeleteLastChar(buffer, i); DEC(i) END
    ELSIF char = CTRLX THEN
      WHILE i # 0 DO DeleteLastChar(buffer, i); DEC(i) END
    ELSIF char = ESC THEN
      char := Terminal.Get();
      IF char = '[' THEN
        REPEAT char := Terminal.Get() UNTIL char >= "A";
        CASE char OF
        | 'A': HistoryBack(buffer, i); RefreshLine(buffer)
        | 'B': HistoryNext(buffer, i); RefreshLine(buffer)
        END
      END
    END
  UNTIL char = CR;
  buffer[i] := NUL;
  Terminal.Ln;
END ReadCmdLine;

PROCEDURE SkipWhiteSpace(buffer: ARRAY OF CHAR; VAR index: INTEGER);
BEGIN
  WHILE buffer[index] = SPACE DO INC(index) END
END SkipWhiteSpace;

PROCEDURE isAlphaNum(char: CHAR): BOOLEAN;
BEGIN
  RETURN (char >= '0') AND (char <='9') OR
         (char >= 'A') AND (char <='Z') OR
         (char >= 'a') AND (char <='z')
END isAlphaNum;

PROCEDURE ReadWord( alphanumOnly : BOOLEAN;
                        buffer   : ARRAY OF CHAR;
                    VAR bufIndex : INTEGER;
                    VAR word     : ARRAY OF CHAR);
VAR char: CHAR;
    wrdIndex: INTEGER;
BEGIN
  wrdIndex := 0;
  char := buffer[bufIndex];
  WHILE (char # NUL) AND (char # SPACE) DO
    IF alphanumOnly AND NOT isAlphaNum(char) THEN
      REPEAT INC(bufIndex); char := buffer[bufIndex] UNTIL (char = NUL) OR (char = SPACE)
    ELSE
      IF wrdIndex < LEN(word) THEN word[wrdIndex] := char; INC(wrdIndex) END;
      INC(bufIndex); char := buffer[bufIndex];
    END;
  END;
  IF wrdIndex < LEN(word) THEN word[wrdIndex] := NUL END
END ReadWord;

PROCEDURE RunCmdLine(buffer: ARRAY OF CHAR);
VAR index, paramIndex : INTEGER;
    progName  : ComLine.FileName;
    params    : ARRAY 3 OF ComLine.FileName;
    input, output: ComLine.FileName;
BEGIN
  index   := 0; SkipWhiteSpace(buffer, index);
  ReadWord(TRUE, buffer, index, progName);
  IF progName = "" THEN RETURN END;

  StoreCommandInHistory(buffer);
  paramIndex := 0;
  WHILE buffer[index] # NUL DO
    SkipWhiteSpace(buffer, index);
    IF    buffer[index] = '<' THEN INC(index); ReadWord(FALSE, buffer, index,  input)
    ELSIF buffer[index] = '>' THEN INC(index); ReadWord(FALSE, buffer, index, output)
    ELSE
      ReadWord(FALSE, buffer, index, params[paramIndex]);
      IF paramIndex < 2 THEN INC(paramIndex) END;
    END
  END;
  ComLine.Chain(progName, params[0], params[1], input, output);
(*  Out.String("Program: "); Out.String(progName); Out.Ln;
    Out.String("Args   : "); Out.String(args); Out.Ln;
    Out.String("Input  : "); Out.String(input); Out.Ln;
    Out.String("Output : "); Out.String(output); Out.Ln; *)
  exit := TRUE;
END RunCmdLine;

BEGIN
  OpenHistory;
  REPEAT
    Terminal.Char(PROMPT);
    Terminal.Char(SPACE);
    ReadCmdLine(buffer);
     RunCmdLine(buffer)
  UNTIL exit;
  IF newHistory THEN Files.Register(history) END;
  Files.Close(history)
END SHELL.
