MODULE Scanner; (* NW 19.9.93 / 15.3.2017  Scanner in Oberon-07*)
  IMPORT Terminal, Files, Streams, Print, SYSTEM, Token;

  (* $[+ remove procedure names *)
  (* $O- remove overflow tests *)
  (* $T- remove tests *)

(* Oberon Scanner does lexical analysis. Input is Oberon-Text, output is
  sequence of symbols, i.e identifiers, numbers, strings, and special symbols.
  Recognises all Oberon keywords and skips comments. The keywords are
  recorded in a table.
  Get(sym) delivers next symbol from input text with Reader R.
  Mark(msg) records error and delivers error message with Writer W.
  If Get delivers ident, then the identifier (a string) is in variable id, if int or char
  in ival, if real in rval, and if string in str (and slen)
*)

  CONST
    IdLen* = 32; stringBufSize* = 256;
    maxExp = 38;
    LF = 0AX; EOF = 1AX;

  TYPE Ident* = ARRAY IdLen OF CHAR;

  VAR
    token*: INTEGER; ival*: LONGINT; slen*: INTEGER;  (*results of Get*)
    rval*: REAL;
    id*: Ident;  (*for identifiers*)
    str*: ARRAY stringBufSize OF CHAR;
    errcnt*: INTEGER;
    inName*, errfilename: ARRAY 16 OF CHAR;
    buffer: ARRAY 256 OF CHAR;
    bufIndex: INTEGER;
    ch: CHAR;  (*last character read*)

    R: Files.Rider;
    err: Streams.OutputStream;

    check*, checkOvf*, suppressNames*, extensions*: BOOLEAN; (* compilation options *)

    line, column, tokenLine, tokenColumn: INTEGER;
    errLine, errCol: INTEGER;

  PROCEDURE NextChar;
  BEGIN
    IF ch = LF THEN column := 1; INC(line) ELSE INC(column) END;
    IF bufIndex = LEN(buffer) THEN
      bufIndex := 0;
      Files.ReadBytes(R, buffer, LEN(buffer));
      IF R.res # 0 THEN buffer[LEN(buffer)-R.res] := EOF END;
    END;
    ch  := buffer[bufIndex];
    INC(bufIndex);
  END NextChar;

  PROCEDURE CopyId*(VAR ident: Ident);
  BEGIN ident := id
  END CopyId;

  PROCEDURE Line*(): INTEGER;
  BEGIN RETURN tokenLine
  END Line;

  PROCEDURE ShowErrPos;
  BEGIN
    Print.String(err, "line ");
    Print.Int   (err, tokenLine, 4);
    Print.String(err, " col ");
    Print.Int   (err, tokenColumn, 3);
    Print.String(err, " ERROR: ");
    INC(errcnt);
    errLine := tokenLine;
    errCol  := tokenColumn + 4
  END ShowErrPos;

  PROCEDURE Mark*(msg: ARRAY OF CHAR);
  BEGIN
    IF ((line # errLine) OR (column > errCol)) & (errcnt < 25) THEN
      ShowErrPos; Print.String(err, msg); Print.Ln(err)
    END ;
  END Mark;

  PROCEDURE Missing*(sym: INTEGER);
  BEGIN
    IF ((line # errLine) OR (column > errCol)) & (errcnt < 25) THEN
      ShowErrPos;
      IF sym # Token.ident THEN Print.Char(err, "'") END;
      CASE sym OF
      | Token.eql      : Print.Char  (err, "=")
      | Token.period   : Print.Char  (err, ".")
      | Token.ident    : Print.String(err, "identifier")
      | Token.comma    : Print.Char  (err, ",")
      | Token.colon    : Print.Char  (err, ":")
      | Token.becomes  : Print.String(err, ":=")
      | Token.rparen   : Print.Char  (err, ")")
      | Token.rbrak    : Print.Char  (err, "]")
      | Token.rbrace   : Print.Char  (err, "}")
      | Token.then     : Print.String(err, "THEN")
      | Token.of       : Print.String(err, "OF")
      | Token.do       : Print.String(err, "DO")
      | Token.to       : Print.String(err, "TO")
      | Token.semicolon: Print.Char  (err, ";")
      | Token.end      : Print.String(err, "END")
      | Token.until    : Print.String(err, "UNTIL")
      | Token.record   : Print.String(err, "RECORD")
      | Token.begin    : Print.String(err, "BEGIN")
      | Token.module   : Print.String(err, "MODULE")
      END;
      IF sym # Token.ident THEN Print.Char(err, "'") END;
      Print.String(err, " expected");
      Print.Ln(err)
    END;
  END Missing;


  PROCEDURE Identifier(VAR symb: INTEGER);
    VAR len, sym: INTEGER;
  BEGIN
    sym := Token.ident;
    len := 0;
    REPEAT
      IF len < IdLen-1 THEN id[len] := ch; INC(len) END ;
      NextChar
    UNTIL (ch < "0") OR (ch > "9") & (ch < "A") OR (ch > "Z") & (ch < "a") OR (ch > "z");
    id[len] := 0X;
    IF id[0] <= "Z" THEN (* leading uppercase *)
     CASE len OF
     | 2 :
      IF    id = "IF" THEN sym := Token.if
      ELSIF id = "DO" THEN sym := Token.do
      ELSIF id = "OR" THEN sym := Token.or
      ELSIF id = "OF" THEN sym := Token.of
      ELSIF id = "TO" THEN sym := Token.to
      ELSIF id = "IN" THEN sym := Token.in
      ELSIF id = "IS" THEN sym := Token.is
      ELSIF id = "BY" THEN sym := Token.by
      END
     | 3 :
      IF    id = "END" THEN sym := Token.end
      ELSIF id = "VAR" THEN sym := Token.var
      ELSIF id = "AND" THEN sym := Token.and
      ELSIF id = "FOR" THEN sym := Token.for
      ELSIF id = "NOT" THEN sym := Token.not
      ELSIF id = "DIV" THEN sym := Token.div
      ELSIF id = "MOD" THEN sym := Token.mod
      ELSIF id = "NIL" THEN sym := Token.nil
      END
     | 4 :
      IF    id = "THEN" THEN sym := Token.then
      ELSIF id = "ELSE" THEN sym := Token.else
      ELSIF id = "TRUE" THEN sym := Token.true
      ELSIF id = "TYPE" THEN sym := Token.type
      ELSIF id = "CASE" THEN sym := Token.case
      END
     | 5 :
      IF    id = "WHILE" THEN sym := Token.while
      ELSIF id = "BEGIN" THEN sym := Token.begin
      ELSIF id = "ELSIF" THEN sym := Token.elsif
      ELSIF id = "FALSE" THEN sym := Token.false
      ELSIF id = "ARRAY" THEN sym := Token.array
      ELSIF id = "CONST" THEN sym := Token.const
      ELSIF id = "UNTIL" THEN sym := Token.until
      END
     | 6 :
      IF    id = "RECORD" THEN sym := Token.record
      ELSIF id = "REPEAT" THEN sym := Token.repeat
      ELSIF id = "RETURN" THEN sym := Token.return
      ELSIF id = "IMPORT" THEN sym := Token.import
      ELSIF id = "MODULE" THEN sym := Token.module
      ELSIF id = "TAGGED" THEN sym := Token.tagged
      END
     | 7 :
      IF    id = "POINTER" THEN sym := Token.pointer
      END
     | 9 :
      IF    id = "PROCEDURE" THEN sym := Token.procedure
      END
     END
    END;
    symb := sym
  END Identifier;

  PROCEDURE String(delimiter: CHAR);
  BEGIN
    slen := 0; NextChar;
    WHILE (ch >= " ") & (ch # delimiter) DO
      IF slen < stringBufSize THEN str[slen] := ch; INC(slen) ELSE Mark("string too long") END ;
      NextChar
    END ;
    IF ch # delimiter THEN Mark("bad string end") END;
    IF slen = 0 THEN str[0] := 0X; INC(slen) END;
    NextChar;
  END String;

  PROCEDURE HexString;
    VAR i, m, n: INTEGER;
  BEGIN i := 0; NextChar;
    WHILE (ch # EOF) & (ch # "$") DO
      WHILE (ch # EOF) & (ch <= " ") DO NextChar END ;  (*skip*)
      IF ("0" <= ch) & (ch <= "9") THEN m := ORD(ch) - 30H
      ELSIF ("A" <= ch) & (ch <= "F") THEN m := ORD(ch) - 37H
      ELSE m := 0; Mark("hexdig expected")
      END ;
      NextChar;
      IF ("0" <= ch) & (ch <= "9") THEN n := ORD(ch) - 30H
      ELSIF ("A" <= ch) & (ch <= "F") THEN n := ORD(ch) - 37H
      ELSE n := 0; Mark("hexdig expected")
      END ;
      IF i < stringBufSize THEN str[i] := CHR(m*10H + n); INC(i) ELSE Mark("string too long") END ;
      NextChar
    END ;
    NextChar; slen := i  (*no 0X appended!*)
  END HexString;

  PROCEDURE Ten(e: INTEGER): REAL;
    VAR x, t: REAL;
  BEGIN x := 1.0; t := 10.0;
    WHILE e > 0 DO
      IF ODD(e) THEN x := t * x END ;
      t := t * t; e := e DIV 2
    END ;
    RETURN x
  END Ten;

  PROCEDURE Number(VAR sym: INTEGER);
    CONST max = 32767;
    VAR i, h, n, e, s: INTEGER;
        k: LONGINT;
        x: REAL;
        d: ARRAY 10 OF BYTE;
      negE: BOOLEAN;
  BEGIN
    ival := LONG(0); i := 0; n := 0; k := LONG(0);
    REPEAT
      IF n < 10 THEN d[n] := ORD(ch)-30H; INC(n) ELSE Mark("too many digits"); n := 0 END ;
      NextChar
    UNTIL (ch < "0") OR (ch > "9") & (ch < "A") OR (ch > "F");
    IF (ch = "H") OR (ch = "X") (* OR (ch = "R") *) THEN  (*hex*)
      REPEAT
        h := d[i]; IF h >= 10 THEN h := h-7 END ;
        k := LSL(k,4) + LONG(h);
        INC(i)
      UNTIL i = n;
      IF ch = "X" THEN sym := Token.string; slen := 1;
        IF k <= LONG(255) THEN str[0] := CHR(INT(k)) ELSE Mark("illegal value") END
(*
      ELSIF ch = "R" THEN sym := Token.real; rval := FLT(k)
*)
      ELSE sym := Token.int; ival := k
      END ;
      NextChar
    ELSIF ch = "." THEN
      NextChar;
      IF ch = "." THEN DEC(bufIndex); (* double dot, go back one char *)
        (* decimal integer in interval range *)
        REPEAT
          IF d[i] < 10 THEN
            k := k * LONG(10) + LONG(d[i]);
            IF k > LONG(255) THEN Mark("too large"); k := LONG(0) END
          ELSE Mark("bad integer")
          END ;
          INC(i)
        UNTIL i = n;
        sym := Token.int; ival := k
      ELSE (*real number*) x := 0.0; e := 0;
        REPEAT  (*integer part*) x := x * 10.0 + FLT(d[i]); INC(i) UNTIL i = n;
        WHILE (ch >= "0") & (ch <= "9") DO  (*fraction*)
          x := x * 10.0 + FLT(ORD(ch) - 30H); DEC(e); NextChar
        END ;
        IF (ch = "E") (* OR (ch = "D") *) THEN  (*scale factor*)
          NextChar; s := 0;
          IF ch = "-" THEN negE := TRUE; NextChar
          ELSE negE := FALSE;
            IF ch = "+" THEN NextChar END
          END ;
          IF (ch >= "0") & (ch <= "9") THEN
            REPEAT s := s*10 + ORD(ch) - 30H; NextChar
            UNTIL (ch < "0") OR (ch >"9");
            IF negE THEN e := e-s ELSE e := e+s END
          ELSE Mark("digit?")
          END
        END ;
        IF e < 0 THEN
          IF e >= -maxExp THEN x := x / Ten(-e) ELSE x := 0.0 END
        ELSIF e > 0 THEN
          IF e <= maxExp THEN x := Ten(e) * x ELSE x := 0.0; Mark("too large") END
        END ;
        sym := Token.real; rval := x;
      END
    ELSE  (*decimal integer*)
      REPEAT
        IF d[i] < 10 THEN (* 2^31 = 2147483648, 214748364 = 0CCCCCCCH *)
(*
          IF (k < 214748364) OR (k = 214748364) AND (d[i] < 8) THEN
 *)
            k := k * LONG(10) + LONG(d[i])
(*
          ELSE Mark("too large"); k := LONG(0)
          END
*)
        ELSE Mark("bad integer")
        END ;
        INC(i)
      UNTIL i = n;
      sym := Token.int; ival := k
    END
  END Number;

  PROCEDURE comment;
  VAR option: CHAR;
      onOff : BOOLEAN;
  BEGIN
    REPEAT NextChar UNTIL ch # " ";
    IF ch = "$" THEN
      NextChar; option := ch; NextChar; onOff := (ch = "+"); NextChar;
      IF    option = "T" THEN check     := onOff
      ELSIF option = "O" THEN checkOvf  := onOff
      ELSIF option = "X" THEN extensions    := onOff
      ELSIF option = "[" THEN suppressNames := onOff
      END
    END;
    REPEAT
      WHILE (ch # EOF) & (ch # "*") DO
        IF ch = "(" THEN NextChar;
          IF ch = "*" THEN comment END
        ELSE NextChar
        END
      END ;
      WHILE ch = "*" DO NextChar END
    UNTIL (ch = ")") OR (ch = EOF);
    IF (ch # EOF) THEN NextChar ELSE Mark("unterminated comment") END
  END comment;

  PROCEDURE Get*(VAR sym: INTEGER);
  BEGIN
    REPEAT
      WHILE (ch # EOF) & (ch <= " ") DO NextChar END;
      tokenLine := line; tokenColumn := column;
      IF ch = EOF THEN token := Token.eot
      ELSIF ch < "A" THEN
        IF ch < "0" THEN
          CASE ch OF
          | "!" : NextChar;   token := Token.null
          | '"' : String(ch); token := Token.string
          | "#" : NextChar;   token := Token.neq
          | "$" : HexString;  token := Token.string
          | "%" : NextChar;   token := Token.null
          | "&" : NextChar;   token := Token.and
          | "'" : String(ch); token := Token.string
          | "(" : NextChar;   token := Token.lparen; IF ch = "*" THEN token := Token.null; comment END
          | ")" : NextChar;   token := Token.rparen
          | "*" : NextChar;   token := Token.times
          | "+" : NextChar;   token := Token.plus
          | "," : NextChar;   token := Token.comma
          | "-" : NextChar;   token := Token.minus
          | "." : NextChar;   token := Token.period; IF ch = "." THEN NextChar; token := Token.upto END
          | "/" : NextChar;   token := Token.rdiv
          END
        ELSIF ch < ":" THEN Number(token)
        ELSE
          CASE ch OF
          | ":" : NextChar;   token := Token.colon; IF ch = "=" THEN NextChar; token := Token.becomes END
          | ";" : NextChar;   token := Token.semicolon
          | "<" : NextChar;   token := Token.lss; IF ch = "=" THEN NextChar; token := Token.leq END
          | "=" : NextChar;   token := Token.eql
          | ">" : NextChar;   token := Token.gtr; IF ch = "=" THEN NextChar; token := Token.geq END
          | "?" : NextChar;   token := Token.null
          | "@" : NextChar;   token := Token.null
          END
        END
      ELSIF   ch < "[" THEN Identifier(token)
      ELSIF   ch < "a" THEN
        token := Token.null;
        CASE ch OF
        | "[" : token := Token.lbrak
        | "]" : token := Token.rbrak
        | "^" : token := Token.arrow
        END;
        NextChar
      ELSIF   ch < "{" THEN Identifier(token)
      ELSE
        token := Token.null;
        CASE ch OF
        | "{" : token := Token.lbrace
        | "|" : token := Token.bar
        | "}" : token := Token.rbrace
        | "~" : token := Token.not
        END;
        NextChar
      END
    UNTIL token # Token.null;
    sym := token
  END Get;

  PROCEDURE MakeFileName*(VAR filename: ARRAY OF CHAR; name, ext: ARRAY OF CHAR);
    VAR i, j: INTEGER;
  BEGIN
    i := 0; j := 0;
    WHILE (i < LEN(name)) & (name[i] # 0X) & (name[i] # '.') & (name[i] # ' ') DO
      IF j < 8 THEN filename[j] := name[i]; INC(j) END; (* limit filenames to 8.3 format *)
      INC(i)
    END ;
    i := 0;
    REPEAT filename[j] := ext[i]; INC(i); INC(j) UNTIL (i >= LEN(ext)) OR (ext[i] = 0X);
    filename[j] := 0X;
  END MakeFileName;

  PROCEDURE Init*(fileName: ARRAY OF CHAR): BOOLEAN;
    VAR inFile : Files.File;
        byte   : BYTE;
  BEGIN
    check := TRUE; checkOvf := TRUE; (* safer compilation options by default *)
    suppressNames := TRUE; (* remove procedure names, save 5 bytes per procedure *)
    line := 1; column := 0; errcnt := 0;
    MakeFileName(inName, fileName, ".OBN");
    inFile := Files.Old(inName);
    IF inFile # NIL THEN
      Files.Set (R, inFile, LONG(0));
      Files.ReadBytes(R, buffer, LEN(buffer));
      IF R.res # 0 THEN buffer[LEN(buffer)-R.res] := EOF END;
      bufIndex := 0; ch := 0X;
      MakeFileName(errfilename, fileName, ".ERR");
      err := Streams.Output(errfilename);
    END;
    RETURN inFile # NIL
  END Init;

  PROCEDURE Close*();
  VAR res: INTEGER;
  BEGIN
    Streams.Close(err);
    IF errcnt = 0 THEN Files.Delete(errfilename, res) END
  END Close;

END Scanner.
