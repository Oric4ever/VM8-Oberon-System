MODULE DIR32;
(*
  Minimal FAT32 filesystem handling:
    - 8.3 filenames

  F.Frances 2020-2022
*)
IMPORT SYSTEM, Disk, FAT32;

CONST DELETED = 0E5X; (* first character of deleted entries *)
(* File attributes bits *)
      READONLY = 0; HIDDEN = 1; SYSFILE = 2; VOLNAME = 3; DIRECTORY = 4; ARCHIVE = 5;

TYPE
    Directory* = FAT32.Cluster;
    BaseName*  = ARRAY  8 OF CHAR;
    Extension* = ARRAY  3 OF CHAR;
    EntryNameAndType* = RECORD
                         baseName* : BaseName;
                         extension*: Extension;
                         attribs*  : BYTE;
                        END;
    DirEntryDesc* = RECORD
                    (* offset  0 *) nameAndType*  : EntryNameAndType;
                    (* offset 12 *) reserved*     : INTEGER;
                    (* offset 14 *) creationTime* : INTEGER;
                    (* offset 16 *) creationDate* : INTEGER;
                    (* offset 18 *) accessDate*   : INTEGER;
                    (* offset 20 *) highCluster*  : INTEGER;
                    (* offset 22 *) writeTime*    : INTEGER;
                    (* offset 24 *) writeDate*    : INTEGER;
                    (* offset 26 *) startCluster* : INTEGER;
                    (* offset 28 *) fileSize*     : LONGINT;
                   END;
    Entry* = RECORD
              startCluster* : FAT32.Cluster; (* first cluster of file *)
              directory*    : Directory;     (* first cluster of directory *)
              index*        : INTEGER;       (* index of entry in directory *)
              desc*         : DirEntryDesc;  (* copy of descriptor *)
             END;

    DirSector = RECORD
                  entries: ARRAY 16 OF DirEntryDesc;
                END;
    DirSectorPtr = POINTER TO DirSector;

VAR currentDir       : Directory;
    savedDir         : Directory;
    dir              : DirSectorPtr;

    findNextCluster  : FAT32.Cluster;
    findNextSector   : INTEGER;
    findNextIndex    : INTEGER;
    findName         : EntryNameAndType;

PROCEDURE Split83Name*(name: ARRAY OF CHAR; VAR base: BaseName; VAR ext: Extension);
VAR i,j: INTEGER;
BEGIN
  base := "        ";
  i := 0;
  WHILE (i < LEN(name)) & (i < 8) & (name[i] # 0X) & (name[i] # '.') DO
    base[i] := CAP(name[i]);
    INC(i)
  END;

  WHILE (i < LEN(name)) & (name[i] # 0X) DO INC(i) END; (* goto the end *)
  REPEAT DEC(i) UNTIL (i = 0) OR (name[i] = ".");       (* rewind to the last dot *)

  ext := "   ";
  IF name[i] = "." THEN
    INC(i);
    j := 0;
    WHILE (i < LEN(name)) & (name[i] # 0X) & (j < 3) DO
      ext[j] := CAP(name[i]);
      INC(i); INC(j)
    END;
  END;
END Split83Name;


(* Create a 8.3 filename, extending '*' wildcards *)
PROCEDURE Build83Name*(name: ARRAY OF CHAR; VAR entryName: EntryNameAndType);
VAR i: INTEGER;
    baseName: BaseName;
    extension: Extension;

  PROCEDURE extendWildcard(VAR s: ARRAY OF CHAR);
  VAR i: INTEGER;
  BEGIN
    i := 0;
    WHILE i < LEN(s) DO
      IF s[i] = '*' THEN
        REPEAT s[i] := '?'; INC(i) UNTIL i = LEN(s)
      END;
      INC(i)
    END;
  END extendWildcard;

BEGIN (* Build83Name *)
  Split83Name(name, entryName.baseName, entryName.extension);
  extendWildcard(entryName.baseName);
  extendWildcard(entryName.extension);
END Build83Name;

(*********************************************************************)
(* Searching Directory entries                                       *)

PROCEDURE InitFind*(entryNameAndType: EntryNameAndType);
(* Initializes a file search in current directory: filename may contain '?' and '*' wildcards *)
BEGIN
  findName            := entryNameAndType;
  findNextCluster     := currentDir;
  findNextSector      := 0;
  findNextIndex       := -1;
END InitFind;

(* $X+ because we use multiple RETURNs *)

PROCEDURE FindNextMatch*(VAR entry: Entry): BOOLEAN;
(* Returns the next find match in current directory *)
VAR endOfDir: BOOLEAN;
    entryName: EntryNameAndType;
    nameInitial: CHAR;

  PROCEDURE Match(pattern, name: ARRAY OF CHAR): BOOLEAN;
  VAR i: INTEGER;
  BEGIN
    i := 0;
    WHILE (i<LEN(pattern)) & ((pattern[i] = name[i]) OR (pattern[i] = '?')) DO
      INC(i)
    END;
    RETURN i = LEN(pattern)
  END Match;

BEGIN (* FindNextMatch *)
  INC(findNextIndex);
  REPEAT
    FAT32.ReadFS(FAT32.ClusterToLBA(findNextCluster) + LONG(findNextSector));
    WHILE findNextIndex < 16 DO (* 16 directory entries per sector *)
      entryName   := dir.entries[findNextIndex].nameAndType;
      nameInitial := entryName.baseName[0];
      IF  nameInitial = 0X THEN RETURN FALSE END; (* end of dir *)
      IF (nameInitial # DELETED)
       & Match(findName.baseName,  entryName.baseName)
       & Match(findName.extension, entryName.extension)
      THEN
        entry.desc         := dir.entries[findNextIndex];
        entry.startCluster := LONG(entry.desc.highCluster, entry.desc.startCluster);
        entry.directory    := findNextCluster;
        entry.index        := findNextSector * 16 + findNextIndex;
        RETURN TRUE
      END;
      INC(findNextIndex);
    END;
    findNextIndex  := 0;
  UNTIL NOT FAT32.NextSector(findNextCluster, findNextSector, FALSE);
  RETURN FALSE (* end of full dir *)
END FindNextMatch;

PROCEDURE FileFind*(name: ARRAY OF CHAR; VAR entry: Entry): BOOLEAN;
BEGIN
  Build83Name(name, entry.desc.nameAndType);
  InitFind(entry.desc.nameAndType);
  RETURN FindNextMatch(entry)
END FileFind;

PROCEDURE NewEntry*(VAR entry: Entry);
(* Finds an empty entry in current directory *)
VAR dirCluster, nextCluster, startCluster: FAT32.Cluster;
    dirSector : INTEGER;
    indx : INTEGER;
    initial: CHAR;
    ptr : POINTER TO DirEntryDesc;
    emptyEntryFound, success : BOOLEAN;
BEGIN
  (* search an empty entry in the directory *)
  dirCluster      := currentDir;
  dirSector       := 0;
  emptyEntryFound := FALSE;
  REPEAT
    FAT32.ReadFS(FAT32.ClusterToLBA(dirCluster) + LONG(dirSector));
    FOR indx:=0 TO 15 DO      (* 16 entries per directory sector *)
      initial := dir.entries[indx].nameAndType.baseName[0];
      IF (initial = 0X)       (* end of directory *)
      OR (initial = 0E5X)     (* deleted entry *)
      THEN
        entry.directory   := dirCluster;
        entry.index       := dirSector * 16 + indx;
        (* TODO: handle time and dates *)
        dir.entries[indx] := entry.desc;
        FAT32.WriteFS;
        RETURN
      END
    END;

    IF NOT FAT32.NextSector(dirCluster, dirSector, FALSE) THEN
    (* all directory sectors are full, we need to extend directory *)
      nextCluster := FAT32.FindFreeCluster();
      FAT32.PutFATentry(dirCluster, nextCluster);
      FAT32.WriteFS;
      SYSTEM.FILL(SYSTEM.ADR(FAT32.bufferFS), 512, 0);
      (* clear directory sectors of the new cluster *)
      dirCluster := nextCluster;
      FOR dirSector := FAT32.sectorsPerCluster-1 TO 0 BY -1 DO
        FAT32.WriteFragment(nextCluster, dirSector, FAT32.bufferFS)
      END;
      dirSector := 0;
    END;
  UNTIL FALSE
END NewEntry;

PROCEDURE UpdateEntry*(VAR entry: Entry);
(* Updates a file entry on disk from its cached version.
   Can be used to rename a file, but be sure to first verify the new name doesn't already exists *)
BEGIN
  FAT32.ReadFS(FAT32.ClusterToLBA(entry.directory) + LONG(entry.index DIV 16));
  dir.entries[entry.index MOD 16] := entry.desc;
  FAT32.WriteFS;
END UpdateEntry;

PROCEDURE DeleteEntry*(VAR entry: Entry);
(* Deletes a file. The entry must have been returned by FindNextMatch first *)
VAR cluster, next: FAT32.Cluster;
BEGIN
  FAT32.ReadFS(FAT32.ClusterToLBA(entry.directory) + LONG(entry.index DIV 16));
  dir.entries[entry.index MOD 16].nameAndType.baseName[0] := DELETED;
  cluster := LONG(entry.desc.highCluster, entry.desc.startCluster);
  FAT32.WriteFS;
  FAT32.DeleteChain(cluster);
END DeleteEntry;

PROCEDURE EnterRootDir*;
BEGIN
  currentDir := FAT32.firstRootCluster;
END EnterRootDir;

PROCEDURE SetCurrentDir*(dir: Directory);
BEGIN
  IF dir = LONG(0) THEN EnterRootDir ELSE currentDir := dir END;
END SetCurrentDir;

PROCEDURE EnterDir*(dirname: ARRAY OF CHAR): BOOLEAN;
(* Enters a subdirectory, returns FALSE if directory does not exist *)
VAR index: INTEGER;
    entry: Entry;
    ext: Extension;
    success : BOOLEAN;
BEGIN
  success := FALSE;
  IF dirname = ".."
  THEN ext := "   "; entry.desc.nameAndType.baseName := "..      "
  ELSE ext := "DIR"; Build83Name(dirname,entry.desc.nameAndType)
  END;
  entry.desc.nameAndType.extension := ext;
  InitFind(entry.desc.nameAndType);
  IF FindNextMatch(entry) THEN
    IF DIRECTORY IN SYSTEM.VAL(SET, ORD(entry.desc.nameAndType.attribs)) THEN
      SetCurrentDir(LONG(entry.desc.highCluster, entry.desc.startCluster));
      success := TRUE
    END;
  END;
  RETURN success
END EnterDir;

PROCEDURE CurrentDir*(): Directory;
BEGIN
  RETURN currentDir
END CurrentDir;

PROCEDURE SaveCurrentDir*;
BEGIN
  savedDir := currentDir;
END SaveCurrentDir;

PROCEDURE BackToSavedDir*;
BEGIN
  currentDir := savedDir;
END BackToSavedDir;

PROCEDURE StartCluster*(entry: Entry): FAT32.Cluster;
BEGIN
  RETURN LONG(entry.desc.highCluster, entry.desc.startCluster)
END StartCluster;

PROCEDURE SetStartCluster*(VAR entry: Entry; startCluster: FAT32.Cluster);
BEGIN
  entry.desc.startCluster := LSW(startCluster);
  entry.desc. highCluster := MSW(startCluster);
END SetStartCluster;

(*
(* Return the cluster of a file sector, following the chain of clusters *)
PROCEDURE ReadClusterSector(sectorNum: LONGINT; cluster: Cluster; buf: ADDRESS);
BEGIN
  ReadSector(ClusterToLBA(cluster) + sectorNum MOD LONG(sectorsPerCluster), buf);
END ReadEntrySector;
*)


BEGIN
  dir := SYSTEM.VAL(DirSectorPtr, FAT32.bufferFS); (* for directory operations, use FAT32's buffer *)
  EnterRootDir
END DIR32.
